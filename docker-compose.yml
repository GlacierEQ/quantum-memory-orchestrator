# üß† QUANTUM MEMORY ORCHESTRATOR - PRODUCTION DEPLOYMENT
# Case: 1FDV-23-0001009
# BAMCPAPIN High Power Architecture
# Multi-service orchestration with Mem0 + SuperMemory + Graph DBs

version: '3.8'

services:
  # üß† Main Quantum Memory Orchestrator
  quantum-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: quantum-memory-orchestrator
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Core Configuration
      - CASE_ID=1FDV-23-0001009
      - ORG_ID=case-1fdv-23-0001009
      - PORT=8000
      - HOST=0.0.0.0
      
      # Memory System APIs
      - MEM0_API_KEY=${MEM0_API_KEY}
      - SUPERMEMORY_URL=http://supermemory:3000
      - SUPERMEMORY_API_KEY=${SUPERMEMORY_API_KEY}
      - MEMORY_PLUGIN_API_KEY=${MEMORY_PLUGIN_API_KEY}
      
      # Security
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
      # Database Connections
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/quantum_memory
      - REDIS_URL=redis://redis:6379/0
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      
      # Vector Databases
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - QDRANT_URL=http://qdrant:6333
      
      # LLM APIs
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      
      # Notion Integration
      - NOTION_TOKEN=${NOTION_TOKEN}
      - NOTION_DATABASE_ID=${NOTION_DATABASE_ID}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_started
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ‚öôÔ∏è SuperMemory Service
  supermemory:
    image: supermemory/supermemory:latest
    container_name: supermemory
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/supermemory
      - REDIS_URL=redis://redis:6379/1
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - JWT_SECRET=${JWT_SECRET}
      - TENANT_ID=case-1fdv-23-0001009
      - NODE_ENV=production
    volumes:
      - supermemory-data:/app/data
      - ./supermemory-config.yml:/app/config.yml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üìä PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: quantum-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=quantum_memory
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=supermemory,mem0_data,audit_logs
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d quantum_memory"]
      interval: 10s
      timeout: 5s
      retries: 5

  # üü• Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: quantum-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - quantum-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # üï∏Ô∏è Neo4j Graph Database
  neo4j:
    image: neo4j:5-community
    container_name: quantum-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=gds.*
      - NEO4J_dbms_memory_pagecache_size=2G
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
      - neo4j-import:/var/lib/neo4j/import
      - neo4j-plugins:/plugins
    networks:
      - quantum-network

  # üîç Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: quantum-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - quantum-network

  # üìà Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: quantum-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - quantum-network

  # üìä Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: quantum-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - quantum-network

  # üåê Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: quantum-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - quantum-orchestrator
      - supermemory
    networks:
      - quantum-network

  # üîç Elasticsearch (Optional - for advanced search)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: quantum-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - quantum-network
    # Uncomment to enable
    # profiles:
    #   - elasticsearch

  # üìã Kibana (Optional - for log analysis)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: quantum-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - quantum-network
    # Uncomment to enable
    # profiles:
    #   - elasticsearch

# üåê Networks
networks:
  quantum-network:
    driver: bridge
    name: quantum-memory-network

# üíæ Persistent Volumes
volumes:
  # Application Data
  postgres-data:
    name: quantum-postgres-data
  redis-data:
    name: quantum-redis-data
  neo4j-data:
    name: quantum-neo4j-data
  neo4j-logs:
    name: quantum-neo4j-logs
  neo4j-import:
    name: quantum-neo4j-import
  neo4j-plugins:
    name: quantum-neo4j-plugins
  qdrant-data:
    name: quantum-qdrant-data
  supermemory-data:
    name: quantum-supermemory-data
  
  # Monitoring Data
  prometheus-data:
    name: quantum-prometheus-data
  grafana-data:
    name: quantum-grafana-data
  elasticsearch-data:
    name: quantum-elasticsearch-data

# üõ†Ô∏è Health Check Services
# Use: docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
# For development overrides and additional services